.institution-detail
  .container
    .col-md-6.no-gutter
      %h2=@organization.name
    .col-md-6.no-gutter
      = select_tag "switch_service_select", options_from_collection_for_select(@organization.services, "url", "name"), class: "form-control input-lg", include_blank: "Otros servicios de esta institución"
- if @service.needs_agreement_to_be_used_by?(current_user)
  .container-fluid
    .cotainer
      .row
        .alert
          = t(:service_needs_agreement)
          - if user_signed_in?
            - if !@organization.can_create_agreements_with_this_organization?(current_user)
              = t(:role_cant_create_agreement)
          - else
            = t(:login_to_be_able_to_create_agreements)

- if user_signed_in? && current_user.is_service_admin? && @service_version.proposed?
  .container-fluid.panel-error.warning.alert.fade.in{:"data-alert" => "alert"}
    .container
      .row
        .col-md-12
          %button.close{"aria-hidden" => "true", "data-dismiss" => "alert", :type => "button"} ×
          %h1= display_service_alert_msg(@service_version.status)['title']
          %h2
            = t(:service_version_proposed_changes) + ":"
          %h3.service_version_proposed_changelog
            = @service_version.changelog
          .actions
            = button_to t(:approve), state_organization_service_service_version_path(state: 'current'), method: :put, class: "btn btn-success"
            %button.btn.btn-danger{"data-target" => "#modalServiceRejected", "data-toggle" => "modal", :type => "button"}
              =t(:reject)
- elsif @service_version.rejected?
  .container-fluid.panel-error.alert.fade.in{:"data-alert" => "alert"}
    .container
      .row
        .col-md-12
          %button.close{"aria-hidden" => "true", "data-dismiss" => "alert", :type => "button"} ×
          %h1= display_service_alert_msg(@service_version.status)['title']
          %p= display_service_alert_msg(@service_version.status)['msg']
          =@service_version.reject_message

.container-fluid.instance-panel-services
  .container
    .row
      .col-md-8
        .title
          %h1
            = @service_version.name
            ="R" + @service_version.version_number.to_s
            - if @service_version.service.public
              = image_tag('open-data.png', size: '16x16', alt: t(:public_service), title: t(:public_service))
          %span{class: css_class_for_status(@service_version.status)}
            = t(@service_version.status)
          - if @service_version.service.support_xml
            %span{class: 'btn-status success'}
              = t(:xml)
        .description
          - if @service_version.description.present?
            = markdown.render(@service_version.description).html_safe
          - else
            = t(:description_not_found)
      .col-md-4.text-right
        =link_to @service_version.has_previous_version? ? organization_service_service_version_path(@organization, @service, @service_version.previous_version) : '' , class: "detail-action #{'deactivate' unless @service_version.has_previous_version? }" do
          %i.material-icons undo
          = t(:previous_version)
        %br
        =link_to @service_version.has_next_version? ? organization_service_service_version_path(@organization, @service, @service_version.next_version) : '' , class: "detail-action #{'deactivate' unless @service_version.has_next_version? }" do
          %i.material-icons redo
          = t(:next_version)
        %br
        =link_to organization_service_service_versions_path, class: "detail-action" do
          %i.material-icons list
          = t(:history)
        %br
        - if user_signed_in? && (current_user.can_see_client_token_for_service?(@service) || current_user.can_see_provider_secret_for_service?(@service))
          =link_to '#modalTokens', class: "detail-action", data: {target: '#modalTokens', toggle: 'modal'} do
            %i.material-icons lock
            = t(:tokens)
          %br
    .row
      .col-md-12.principal-actions{:class => "#{'button-disabled' unless user_signed_in? && (@service.can_be_updated_by?(current_user) && (@service.needs_agreement_to_be_used_by?(current_user) && @organization.can_create_agreements_with_this_organization?(current_user))) }"}
        - if @organization.can_create_agreements_with_this_organization?(current_user)
          - if @service.needs_agreement_to_be_used_by?(current_user) || !current_user.organizations_have_agreements_for_all_orgs(@service)
            - if current_user.can_create_agreements_to_many_organizations?(@service)
              .btn-group
                %button.btn.btn-primary.dropdown-toggle{"aria-expanded" => "false", "aria-haspopup" => "true", "data-toggle" => "dropdown", :type => "button"}
                  = t(:new_agreement)
                  %span.caret
                %ul.dropdown-menu
                  - current_user.organizations_where_can_create_agreements(@service).each do |org|
                    %li
                      =link_to org.name, new_organization_agreement_path(org, provider_org: @service.organization_id, service_id: @service.id )
            - else
              = link_to t(:new_agreement), new_organization_agreement_path(current_user.agreement_creation_organization(@service), provider_org: @service.organization_id, service_id: @service.id), class: "btn btn-primary"
        - if @service.can_be_updated_by?(current_user)
          =link_to t(:new_version), new_organization_service_service_version_path, class: "btn btn-primary"
        =link_to t(:view_oas), organization_service_service_version_url(@organization, @service, @service_version, format: :json), class: 'btn btn-static'
        %button.btn.btn-static{"data-target" => "#modalDownloadCode", "data-toggle" => "modal", :type => "button"}
          = t(:generate_code)
        %p.url-canonica
          %span
            %strong
              = t(:base_url) + ': '
            %a= @service_version.base_url

.container-fluid
  .row
    .col-md-12.wrapper-operation.no-gutter
      .container-verbs.in
        .header
          %i#collapseVerbs.material-icons keyboard_arrow_left
          %h3.col-title
            = t(:operations)
        %ul.list-operations
          - @service_version.operations.each do |(verb, path), operation|
            %li
              %a{href: operation_organization_service_service_version_path(verb: verb, path: path, anchor: 'operation')}
                %label.btn-status.full{class: css_class_for_http_verb(verb)}= verb
                %span.path= path
      .container-service
        #operation.operation.in
          .inner-operation
            %h2
              %label.btn-status.full{class: css_class_for_http_verb(@verb)}= @verb
              = @path
            .description-summary
              - if @operation['summary']
                %p= @operation['summary']
              - if @operation['description']
                %div= markdown.render(@operation['description']).html_safe
            %button.btn.btn-success.collapseConsole
              =t(:test_service)
            - unless @service_version.custom_mock_service.blank?
              %span.btn-status.info.with-mock
                = t(:with_custom_mock_service)

            .parameters
              %h2.subtitle= t(:parameters)
              - if @service_version.has_parameters?(@verb, @path)
                - @service_version.parameter_locations(@verb, @path).each do |location|
                  .subtitle-service
                    .col-md-6.text-left
                      %h3= parameter_section_name(location)
                    .col-md-6.text-right
                      %span.bullet-required
                        =t(:property_required)
                  .schema-panel-set.detail
                    = service_operation_parameters_markup(@service_version, @verb, @path, location)
              - else
                %p= t(:operation_without_parameters)
            .responses
              .subtitle-service.clearfix
                .col-md-6.text-left
                  %h3= t(:responses)
                .col-md-6.text-right
                  %span.bullet-required
                    =t(:property_required)
              = service_operation_responses_markup(@service_version, @verb, @path)
        .console
          .inner-console
            .title
              %i#fullConsole.material-icons.pull-left zoom_out_map
              %i#closeConsole.material-icons.pull-right clear
            - if @service.needs_agreement_to_be_used_by?(current_user)
              -# When we implement the mock server feature we shall remove this restriction
              .alert
                = t(:cant_test_service_without_agreement)
              - if @organization.can_create_agreements_with_this_organization?(current_user)
                - if @service.needs_agreement_to_be_used_by?(current_user) || !current_user.organizations_have_agreements_for_all_orgs(@service)
                  - if current_user.can_create_agreements_to_many_organizations?(@service)
                    .btn-group
                      %button.btn.btn-primary.dropdown-toggle{"aria-expanded" => "false", "aria-haspopup" => "true", "data-toggle" => "dropdown", :type => "button"}
                        = t(:new_agreement)
                        %span.caret
                      %ul.dropdown-menu
                        - current_user.organizations_where_can_create_agreements(@service).each do |org|
                          %li
                            =link_to org.name, new_organization_agreement_path(org, provider_org: @service.organization_id, service_id: @service.id)
                  - else
                    = link_to t(:new_agreement), new_organization_agreement_path(current_user.agreement_creation_organization(@service), provider_org: @service.organization_id, service_id: @service.id), class: "btn btn-primary"
            - else
              %form#consoleForm
                %h3= t(:parameters)
                - if @service_version.has_parameters?(@verb, @path)
                  - @service_version.parameter_locations(@verb, @path).each do |location|
                    .console-parameter-group{data: {location: location}}
                      .subtitle
                        .col-md-6.text-left
                          %h3= parameter_section_name(location)
                        .col-md-6.text-right
                          %span.bullet-required
                            =t(:property_required)
                      %ul.nav.nav-tabs
                        %li.display-tab.active{"data-tab": ".form-tab"}
                          %a Form
                        %li.display-tab{"data-tab": ".json-tab"}
                          %a JSON
                      .tab-content
                        .form-tab.tab-pane.active
                          .schema-panel-set
                            = service_operation_parameters_form(@service_version, @verb, @path, location)
                        .json-tab.tab-pane
                          .raw-json
                    %hr
                - else
                  %p= t(:operation_without_parameters)
                .btn-group
                  = hidden_field_tag :test_type_service, "real"
                  %button.btn.btn-primary.dropdown-toggle{"data-toggle" => "dropdown", :type => "button"}
                    %span.caret
                  %ul#btns-service-console.dropdown-menu
                    %li.type-test-service{"data-type-service" => "real"}
                      %a= t(:real_service)
                    %li.type-test-service{"data-type-service" => "mock"}
                      %a= t(:mock_service)
                    - unless @service_version.custom_mock_service.blank?
                      %li.type-test-service{"data-type-service" => "mock_custom"}
                        %a= t(:mock_custom_service)
                %button#try-service.btn.btn-primary{type: 'submit'}
                  = t(:send)
              .console-response-group
                %h3=t(:response)
                %pre.code#response

#modalTokens.modal.fade{:role => "dialog", :tabindex => "-1"}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
          %span{"aria-hidden" => "true"} ×
        %h1
          =t(:tokens)
      .modal-body
        - if user_signed_in? && current_user.can_see_provider_secret_for_service?(@service)
          .row
            .col-md-3
              %h4 Provider ID:
            .col-md-9
              %pre= @service.provider_id
          .row
            .col-md-3
              %h4 Provider Secret:
            .col-md-9
              %pre= @service.provider_secret

        - if user_signed_in? && current_user.can_see_client_token_for_service?(@service)
          .row
            .col-md-3
              %h4 Client Token:
            .col-md-9
              %pre= @service.generate_client_token
          .row
            .col-md-3
            .col-md-9
              %small= t(:for_testing_purposes)
      .modal-footer
        %button.btn.btn-default{"data-dismiss" => "modal", :type => "button"}
          =t(:close)


#modalDownloadCode.modal.fade{:role => "dialog", :tabindex => "-1"}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
          %span{"aria-hidden" => "true"} ×
        %h1
          =t(:generate_code)
      .modal-body
        .row
          %form#code-options
            .col-md-6
              %h4
                =t(:download_client)
              .input-languages
                %input{type: "checkbox", name: "java", id: "input-java"}
                %label{for: "input-java"} JAVA
              .input-languages
                %input{type: "checkbox", name: "php", id: "input-php"}
                %label{for: "input-php"} PHP
              .input-languages
                %input{type: "checkbox", name: "csharp", id: "input-csharp"}
                %label{for: "input-csharp"} C#
            .col-md-6
              %h4
                =t(:download_server)
              .input-languages
                %input{type: "checkbox", name: "jaxrs-cxf", id: "jaxrs-cxf"}
                %label{for: "jaxrs-cxf"} JAVA: JAXRS-CXF
              .input-languages
                %input{type: "checkbox", name: "slim", id: "input-slim"}
                %label{for: "input-slim"} PHP: SLIM
              .input-languages
                %input{type: "checkbox", name: "aspnet5", id: "aspnet5"}
                %label{for: "aspnet5"} .NET: ASPNET5
      .modal-footer
        %button.btn.btn-default{"data-dismiss" => "modal", :type => "button"}
          =t(:cancel)
        =link_to t(:generate_code), source_code_organization_service_service_version_path, target: "_blank", class: "btn btn-static", id: "generate-code", rel: "noopener noreferrer"

- if @service_version.proposed?
  #modalServiceRejected.modal.fade{:role => "dialog", :tabindex => "-1"}
    .modal-dialog
      .modal-content
        .modal-header
          %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
            %span{"aria-hidden" => "true"} ×
          %h1=t(:reject_service)
        = form_for @service_version, :url => reject_organization_service_service_version_path do |f|
          .modal-body
            %h3
              =t(:rejection_reason)
            =f.text_area :reject_message
            .modal-footer
              %button.btn.btn-default{"data-dismiss" => "modal", :type => "button"}
                =t(:cancel)
              %button.btn.btn-danger{:type => "submit"}
                = t(:reject)
